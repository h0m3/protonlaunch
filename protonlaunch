#!/usr/bin/env bash
# Copyright (c) 2022, Artur 'h0m3' Paiva <dr.hoome@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of protonlaunch nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Protonlaunch IS NOT associated with Valve Software. Steam, Valve and Proton
# are developed by and trademarks of of Valve Software.
#


# Version string
VERSION="0.7"

# Get program name
PROGRAM_NAME="$(basename "$(echo "${0}")")"


# Show message logs
function pl_info() {
    echo "${PROGRAM_NAME}: ${1}" >&1
}

# Show a warning message
function pl_warning() {
    echo "${PROGRAM_NAME}: Warning: ${1}" >&1
}

# Raise an error and terminate the application
function pl_error() {
    echo "${PROGRAM_NAME}: Error: ${1}" >&2
    exit 1
}


# Show a usage message
function pl_usage() {
    echo "Usage: ${0} [option] program [arguments...]"
    echo
    echo "Options:"
    echo -e "\t-h, --help\t\tDisplay this message and exit"
    echo -e "\t-v, --version\tDisplay version and exit"
    echo
    echo "Environment Variables:"
    echo -e "\tPROTONPREFIX"
    echo -e "\t\tPath to proton prefix (Default is \$HOME/.proton). STEAM_COMPAT_DATA_PATH have priority"
    echo
    echo -e "\tWINEPREFIX"
    echo -e "\t\tSame as PROTONPREFIX. STEAM_COMPAT_DATA_PATH have priority"
    echo
    echo -e "\tMANGOHUD"
    echo -e "\t\tEnable MangoHUD <https://github.com/flightlessmango/MangoHud>"
    echo
    echo -e "\t_STEAM_PATH"
    echo -e "\t\tPath to Steam installation user files (usually \$HOME/.local/share/Steam). STEAM_COMPAT_CLIENT_INSTALL_PATH have priority"
    echo
    echo -e "\t_STEAM_LIBRARY_PATH"
    echo -e "\t\tPath to Steam Library folder (Default is \$STEAM_COMPAT_CLIENT_INSTALL_PATH)"
    echo
    echo -e "\t_PROTON_VERSION"
    echo -e "\t\tVersion of proton to use, same name as the 'proton folder' under steamapps/common. If ommited Protonlaunch will try to use the latest non experimental"
    echo
    echo -e "\t_GAMEMODE"
    echo -e "\t\tEnable GameMode <https://github.com/FeralInteractive/gamemode>"
    echo
    echo -e "\t_NVAPI"
    echo -e "\t\tEnable NVAPI for supported games. This allows nvidia exclusives like DLSS for supported games. PROTON_ENABLE_NVAPI have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_DLSS"
    echo -e "\t\tSame as _NVAPI. PROTON_ENABLE_NVAPI have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_DXR"
    echo -e "\t\tEnable VKD3D DirectX RayTracing for supported games."
    echo -e "\t\tNote: For NVIDIA RTX cards you also need _NVAPI enabled"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_RTX"
    echo -e "\t\tEnable RayTracing for NVIDIA RTX cards. This replaces _DXR _NVAPI. PROTON_ENABLE_NVAPI have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_FRAMECAP"
    echo -e "\t\tDXVK FPS capping. DXVK_FRAME_RATE have priority"
    echo
    echo -e "\t_FSR"
    echo -e "\t\tEnable AMD FSR for supported games. WINE_FULLSCREEN_FSR have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
}


# Show a version message
function pl_version() {
    echo "ProtonLaunch version ${VERSION}"
    echo "Protonlaunch is licensed under BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>"

    echo
    echo "This is free software; you are free to change and redistribute it."
    echo "There is NO WARRANTY, to the extent permitted by law."
}


# Set color information
function pl_set_color() {
    if [ -z ${PL_NO_COLORS} ]; then

}

# Find Steam installation path
function pl_get_steam_path() {
    if [ ! -z ${_STEAM_PATH} ]; then
        export STEAM_COMPAT_CLIENT_INSTALL_PATH="${_STEAM_PATH}"
        return
    fi

    if [ -e "${HOME}/.local/share/Steam/steam.sh" ]; then
        export STEAM_COMPAT_CLIENT_INSTALL_PATH="${HOME}/.local/share/Steam"
        return
    fi

    if [ -h "${HOME}/.steam/steam" ]; then
        path="$(readlink ${HOME}/.steam/steam)"
        if [ -e "${path}/steam.sh" ]; then
            export STEAM_COMPAT_CLIENT_INSTALL_PATH="${path}"
            return
        fi
    fi

    pl_error "Unable to find Steam path, please set _STEAM_PATH"
}


# Find Steam library path
function pl_get_steam_library() {
    if [ -d "${STEAM_COMPAT_CLIENT_INSTALL_PATH}/steamapps/common" ]; then
        export _STEAM_LIBRARY_PATH="${STEAM_COMPAT_CLIENT_INSTALL_PATH}"
        return
    fi

    pl_error "Unable to find Steam library, make sure that Proton is installed and set _STEAM_LIBRARY_PATH if necessary"
}


# Get proton version
function pl_get_proton_version() {
    library_path="${_STEAM_LIBRARY_PATH}/steamapps/common"
    if ! proton_list="$(ls -1r "${library_path}" 2> /dev/null | grep -i proton 2> /dev/null)"; then
        pl_error "Unable to find Proton on '${_STEAM_LIBRARY_PATH}', make sure proton is installed and set _PROTON_VERSION if necessary"
    fi

    if [ "$(echo "${proton_list}" | head -n 1)" == "Proton - Experimental" ]; then
        export _PROTON_VERSION="$(echo "${proton_list}" | head -n 2 | tail -n 1)"
    else
        export _PROTON_VERSION="$(echo "${proton_list}" | head -n 1)"
    fi
}


# Get proton exexcutable path
function pl_get_proton_path() {
    if [ -e "${_STEAM_LIBRARY_PATH}/steamapps/common/${_PROTON_VERSION}/proton" ]; then
        export proton="${_STEAM_LIBRARY_PATH}/steamapps/common/${_PROTON_VERSION}/proton"
        return
    fi

    pl_error "Unable to find Proton installation on '${_STEAM_LIBRARY_PATH}/steamapps/common/${_PROTON_VERSION}'"
}


# Get prefix path
function pl_get_prefix() {
    if [ ! -z "${WINEPREFIX}" ]; then
        export STEAM_COMPAT_DATA_PATH="${WINEPREFIX}"
        return
    fi

    if [ ! -z "${PROTONPREFIX}" ]; then
        export STEAM_COMPAT_DATA_PATH="${PROTONPREFIX}"
        return
    fi

    export STEAM_COMPAT_DATA_PATH="${HOME}/.proton"
}


# Bootstrap prefix
function pl_bootstrap() {
    if [ ! -d "${1}/pfx/drive_c" ]; then
        pl_info "Bootstrapping '${1}'"
        "${proton}" run wineboot
    fi
}


# Run a program
function pl_run() {
    command="${1}"
    shift
    params=${@}
    pl_info "Program is '${command}'"

    if [ -z "${params}" ]; then
        pl_info "Running: ${GAMEMODE_CMD} ${MANGOHUD_CMD} \"${proton}\" run \"${command}\""
        ${GAMEMODE_CMD} ${MANGOHUD_CMD} "${proton}" run "${command}"
    else
        pl_info "Running: ${GAMEMODE_CMD} ${MANGOHUD_CMD} \"${proton}\" runinprefix \"${command}\" ${params}"
        ${GAMEMODE_CMD} ${MANGOHUD_CMD} "${proton}" runinprefix "${command}" ${params}
    fi
}


# Enable MangoHUD
function pl_mangohud() {
    if command -v mangohud &> /dev/null && [ "${MANGOHUD}" == "1" ]; then
        pl_info "MangoHUD enabled"
        export MANGOHUD_CMD="mangohud"
    else
        export MANGOHUD_CMD=""
    fi
}


# Enable GameMode
function pl_gamemode() {
    if command -v gamemoderun &> /dev/null && [ "${_GAMEMODE}" == "1" ]; then
        pl_info "GameMode enabled"
        export GAMEMODE_CMD="gamemoderun"
    else
        export GAMEMODE_CMD=""
    fi
}


# Enable NVAPI / DLSS
function pl_nvapi() {
    if [ -z "${PROTON_ENABLE_NVAPI}" ]; then
        if [ "${_NVAPI}" == "1" ] || [ "${_DLSS}" == "1" ]; then
            pl_info "NVAPI Enabled"
            export PROTON_ENABLE_NVAPI=1
        fi
    fi
}


# Enable RayTracing
function pl_dxr() {
    if [ "${_DXR}" == "1" ]; then
        pl_info "DirectX RayTracing Enabled"
        if [ -z "${VKD3D_CONFIG}" ]; then
            export VKD3D_CONFIG="dxr"
        else
            export VKD3D_CONFIG="${VKD3D_CONFIG}:dxr"
        fi
    fi
}


# Enable NVIDIA RayTracing
function pl_rtx() {
    if [ "${_RTX}" == "1" ]; then
        export _NVAPI="1"
        export _DXR="1"
        pl_nvapi
        pl_dxr
    fi
}


# Enable frame capping
function pl_framecap() {
    if [ ! -z "${_FRAMECAP}" ] && [ -z "${DXVK_FRAME_RATE}" ]; then
        pl_info "Framerate capped at ${_FRAMECAP} FPS"
        export DXVK_FRAME_RATE="${_FRAMECAP}"
    fi
}


# Enable AMD FSR
function pl_fsr() {
    if [ "${_FSR}" == "1" ] && [ -z "${WINE_FULLSCREEN_FSR}" ]; then
        pl_info "AMD FSR Enabled"
        export WINE_FULLSCREEN_FSR=1
    fi
}


# Manage launch options
if [ -z "${1}" ]; then
    pl_error "Expecting a program name or aregument, try --help"
fi

case ${1} in
    "-h") pl_usage; exit 0;;
    "--help") pl_usage; exit 0;;
    "-v") pl_version; exit 0;;
    "--version") pl_version; exit 0;;
esac

# Get variables
if [ -z ${STEAM_COMPAT_CLIENT_INSTALL_PATH} ]; then
    pl_get_steam_path
fi
pl_info "Steam installation path is '${STEAM_COMPAT_CLIENT_INSTALL_PATH}'"

if [ -z ${_STEAM_LIBRARY_PATH} ]; then
    pl_get_steam_library
fi
pl_info "Steam library path is '${_STEAM_LIBRARY_PATH}'"

if [ -z "${_PROTON_VERSION}" ]; then
    pl_get_proton_version
fi
pl_info "Proton version '${_PROTON_VERSION}'"

pl_get_proton_path

pl_get_prefix
pl_info "Prefix '${STEAM_COMPAT_DATA_PATH}'"

# Create and bootstrap prefix
if ! mkdir -pv "${STEAM_COMPAT_DATA_PATH}"; then
    pl_error "Failed to create prefix '${STEAM_COMPAT_DATA_PATH}'"
fi
if ! pl_bootstrap "${STEAM_COMPAT_DATA_PATH}"; then
    pl_error "Failed to bootstrap '${STEAM_COMPAT_DATA_PATH}'"
fi

pl_mangohud
pl_gamemode
pl_nvapi
pl_dxr
pl_rtx
pl_framecap
pl_fsr

# Run proton
pl_run "${@}"
