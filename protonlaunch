#!/usr/bin/env bash
# Copyright (c) 2022, Artur 'h0m3' Paiva <dr.hoome@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of protonlaunch nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Protonlaunch IS NOT associated with Valve Software. Steam, Valve and Proton
# are developed by and trademarks of of Valve Software.
#


# Version string
VERSION="0.7"

# Get program name
PROGRAM_NAME="$(basename "$(echo "${0}")")"


# Show message logs
pl_info() {
    echo "${pl_bold}${pl_blue}${PROGRAM_NAME}:${pl_normal} ${1}" > /dev/stdout
}

# Show a warning message
pl_warning() {
    echo "${pl_bold}${pl_yellow}${PROGRAM_NAME}:${pl_normal} Warning: ${1}" > /dev/stderr
}

# Raise an error and terminate the application
pl_error() {
    echo "${pl_bold}${pl_red}${PROGRAM_NAME}:${pl_normal} Error: ${1}" > /dev/stderr
    exit 1
}


# Show a usage message
pl_usage() {
    echo "Usage: ${PROGRAM_NAME} [option] program [arguments...]"
    echo
    echo "Options:"
    echo -e "\t-h, --help\t\tDisplay this message and exit"
    echo -e "\t-v, --version\tDisplay version and exit"
    echo
    echo "Environment Variables:"
    echo -e "\tPROTONPREFIX"
    echo -e "\t\tPath to proton prefix (Default is \$HOME/.proton). STEAM_COMPAT_DATA_PATH have priority"
    echo
    echo -e "\tWINEPREFIX"
    echo -e "\t\tSame as PROTONPREFIX. STEAM_COMPAT_DATA_PATH have priority"
    echo
    echo -e "\tMANGOHUD"
    echo -e "\t\tEnable MangoHUD <https://github.com/flightlessmango/MangoHud>"
    echo
    echo -e "\t_STEAM_PATH"
    echo -e "\t\tPath to Steam installation user files (usually \$HOME/.local/share/Steam). STEAM_COMPAT_CLIENT_INSTALL_PATH have priority"
    echo
    echo -e "\t_STEAM_LIBRARY_PATH"
    echo -e "\t\tPath to Steam Library folder (Default is \$STEAM_COMPAT_CLIENT_INSTALL_PATH)"
    echo
    echo -e "\t_PROTON_VERSION"
    echo -e "\t\tVersion of proton to use, same name as the 'proton folder' under steamapps/common. If ommited Protonlaunch will try to use the latest non experimental"
    echo
    echo -e "\t_GAMEMODE"
    echo -e "\t\tEnable GameMode <https://github.com/FeralInteractive/gamemode>"
    echo
    echo -e "\t_NVAPI"
    echo -e "\t\tEnable NVAPI for supported games. This allows nvidia exclusives like DLSS for supported games. PROTON_ENABLE_NVAPI have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_DLSS"
    echo -e "\t\tSame as _NVAPI. PROTON_ENABLE_NVAPI have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_DXR"
    echo -e "\t\tEnable VKD3D DirectX RayTracing for supported games."
    echo -e "\t\tNote: For NVIDIA RTX cards you also need _NVAPI enabled"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_RTX"
    echo -e "\t\tEnable RayTracing for NVIDIA RTX cards. This replaces _DXR _NVAPI. PROTON_ENABLE_NVAPI have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
    echo -e "\t_FRAMECAP"
    echo -e "\t\tDXVK FPS capping. DXVK_FRAME_RATE have priority"
    echo
    echo -e "\t_FSR"
    echo -e "\t\tEnable AMD FSR for supported games. WINE_FULLSCREEN_FSR have priority"
    echo -e "\t\tNote: This option may crash your game, not all games and GPUs are supported"
    echo
}


# Show a version message
pl_version() {
    echo "ProtonLaunch version ${VERSION}"
    echo "Protonlaunch is licensed under BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>"

    echo
    echo "This is free software; you are free to change and redistribute it."
    echo "There is NO WARRANTY, to the extent permitted by law."
}


# Set colors if supported
pl_set_colors() {
    ncolors="$(tput colors)"
    if [ -z "${PL_NO_COLORS}" ] && [ -t 1 ] && [ -n "${ncolors}" ] && [ "$(tput colors)" -ge 8 ]; then
        export pl_bold="$(tput bold)"
        export pl_underline="$(tput smul)"
        export pl_standout="$(tput smso)"
        export pl_normal="$(tput sgr0)"
        export pl_black="$(tput setaf 0)"
        export pl_red="$(tput setaf 1)"
        export pl_green="$(tput setaf 2)"
        export pl_yellow="$(tput setaf 3)"
        export pl_blue="$(tput setaf 4)"
        export pl_magenta="$(tput setaf 5)"
        export pl_cyan="$(tput setaf 6)"
        export pl_white="$(tput setaf 7)"
    fi
}

# Set legacy support variables
pl_set_legacy() {
    if [ ! -z "${_STEAM_PATH}" ]; then
        #pl_warning "_STEAM_PATH is deprecated, you should use PL_STEAM_PATH"
        export PL_STEAM_PATH="${_STEAM_PATH}"
    fi

    if [ ! -z "${_STEAM_LIBRARY_PATH}" ]; then
        #pl_warning "_STEAM_LIBRARY_PATH is deprecated, you should use PL_LIBRARY_PATH"
        pl_add_library_path "${_STEAM_LIBRARY_PATH}"
    fi

    if [ ! -z "${_PROTON_VERSION}" ]; then
        #pl_warning "_PROTON_VERSION is deprecated, you should use PL_PROTON_VERSION"
        export PL_PROTON_VERSION="${_PROTON_VERSION}"
    fi
}


# Find Steam installation path
pl_get_steam_path() {
    if [ -z "${STEAM_COMPAT_CLIENT_INSTALL_PATH}" ]; then

        if [ ! -z "${PL_STEAM_PATH}" ]; then
            export STEAM_COMPAT_CLIENT_INSTALL_PATH="${PL_STEAM_PATH}"
            return
        fi

        if [ -d "${HOME}/.local/share/Steam" ] && [ -e "${HOME}/.local/share/Steam/steam.sh" ]; then
            export STEAM_COMPAT_CLIENT_INSTALL_PATH="${HOME}/.local/share/Steam"
            return
        fi

        if [ -d "${HOME}/.steam/debian-installaton" ] && [ -e "${HOME}/.steam/debian-installation/steam.sh" ]; then
            export STEAM_COMPAT_CLIENT_INSTALL_PATH="${HOME}/.steam/debian-installation"
            return
        fi

        if [ -h "${HOME}/.steam/steam" ]; then
            path="$(readlink ${HOME}/.steam/steam)"
            if [ -e "${path}/steam.sh" ]; then
                export STEAM_COMPAT_CLIENT_INSTALL_PATH="${path}"
                return
            fi
        fi

        if [ -d "${HOME}/.steam/steam" ] && [ -e "${HOME}/.steam/steam/steam.sh" ]; then
            export STEAM_COMPAT_CLIENT_INSTALL_PATH="${HOME}/.steam/steam"
            return
        fi

        pl_error "unable to find Steam path, please set PL_STEAM_PATH"

    fi
}


# Add a path to the steam library paths
pl_add_library_path() {
    if [ -z "${PL_LIBRARY_PATH}" ]; then
        export PL_LIBRARY_PATH="${1}"
    else
        export PL_LIBRARY_PATH="${PL_LIBRARY_PATH}:${1}"
    fi
}


# Find Steam library paths
pl_get_steam_library() {
    if [ -f "${STEAM_COMPAT_CLIENT_INSTALL_PATH}/config/libraryfolders.vdf" ]; then
        pl_paths="$(grep -i path "${STEAM_COMPAT_CLIENT_INSTALL_PATH}/config/libraryfolders.vdf" | cut -d '"' -f 4)"
        for pl_path in ${pl_paths}; do
            if [ -d "${pl_path}/steamapps/common" ]; then
                pl_add_library_path "${pl_path}"
            fi
        done
    fi

    if [ -z "${PL_LIBRARY_PATH}" ]; then
        if [ -d "${STEAM_COMPAT_CLIENT_INSTALL_PATH}/steamapps/common" ]; then
            pl_add_library_path "${STEAM_COMPAT_CLIENT_INSTALL_PATH}"
        else
            pl_error "unable to find Steam library, make sure that Proton is installed and set PL_LIBRARY_PATH if necessary"
        fi
    fi
}


# Add proton to proton list
pl_add_proton_list() {
    if [ -z "${PL_PROTON_LIST}" ]; then
        export PL_PROTON_LIST="${1}"
    else
        export PL_PROTON_LIST="${PL_PROTON_LIST}:${1}"
    fi
}


# Get all proton versions
pl_get_proton_list() {
    old_ifs="${IFS}"
    IFS=":"
    for pl_path in ${PL_LIBRARY_PATH}; do
        library_path="${pl_path}/steamapps/common"
        for proton in ${library_path}/*; do
            if echo ${proton} | grep -i proton 2>&1 > /dev/null && [ -f "${proton}/proton" ]; then
                pl_add_proton_list "${proton}"
            fi
        done
    done
    IFS="${old_ifs}"
}


# Get proton
pl_get_proton() {
    old_ifs="${IFS}"
    IFS=":"
    for proton in ${PL_PROTON_LIST}; do
        name="$(basename ${proton})"
        if [ -z "${PL_PROTON_VERSION}" ]; then
            if [ "${name}" != "Proton - Experimental" ] || [ -z "${pl_proton_path}" ]; then
                export pl_proton_path="${proton}"
            fi
        else
            if [ "${name}" = "${PL_PROTON_VERSION}" ]; then
                export pl_proton_path="${proton}"
            fi
        fi
    done
    IFS="${old_ifs}"

    if [ -z "${PL_PROTON_VERSION}" ]; then
        if [ -z "${pl_proton_path}" ]; then
            pl_error "no Proton installation found, make sure you've installed Proton trough Steam"
        fi
        export PL_PROTON_VERSION="$(basename "${pl_proton_path}")"
    else
        if [ -z "${pl_proton_path}" ]; then
            pl_error "Unable to find Proton installation of '${PL_PROTON_VERSION}'"
        fi
    fi
}

# Get prefix path
pl_get_prefix() {
    if [ -z ${STEAM_COMPAT_DATA_PATH} ]; then
        if [ ! -z "${WINEPREFIX}" ]; then
            pl_warning "is not recommended to use WINEPREFIX. Use PROTONPREFIX instead"
            export STEAM_COMPAT_DATA_PATH="${WINEPREFIX}"
            return
        fi

        if [ ! -z "${PROTONPREFIX}" ]; then
            export STEAM_COMPAT_DATA_PATH="${PROTONPREFIX}"
            return
        fi

        export STEAM_COMPAT_DATA_PATH="${HOME}/.proton"
    fi
}


# Bootstrap prefix
pl_bootstrap() {
    if [ ! -d "${1}/pfx/drive_c" ]; then
        pl_info "bootstrapping '${1}'"
        "${pl_proton}" run wineboot
    fi
}


# Run a program
pl_run() {
    command="${1}"
    shift
    params=${@}
    pl_info "Program is '${command}'"

    if [ -z "${params}" ]; then
        pl_info "Running: ${GAMEMODE_CMD} ${MANGOHUD_CMD} \"${proton}\" run \"${command}\""
        ${GAMEMODE_CMD} ${MANGOHUD_CMD} "${proton}" run "${command}"
    else
        pl_info "Running: ${GAMEMODE_CMD} ${MANGOHUD_CMD} \"${proton}\" runinprefix \"${command}\" ${params}"
        ${GAMEMODE_CMD} ${MANGOHUD_CMD} "${proton}" runinprefix "${command}" ${params}
    fi
}


# Enable NVAPI / DLSS
pl_nvapi() {
    if [ -z "${PROTON_ENABLE_NVAPI}" ]; then
        if [ "${_NVAPI}" = "1" ] || [ "${_DLSS}" = "1" ]; then
            pl_info "NVAPI Enabled"
            export PROTON_ENABLE_NVAPI=1
        fi
    fi
}


# Enable RayTracing
pl_dxr() {
    if [ "${_DXR}" = "1" ]; then
        pl_info "DirectX RayTracing Enabled"
        if [ -z "${VKD3D_CONFIG}" ]; then
            export VKD3D_CONFIG="dxr"
        else
            export VKD3D_CONFIG="${VKD3D_CONFIG}:dxr"
        fi
    fi
}


# Enable NVIDIA RayTracing
pl_rtx() {
    if [ "${_RTX}" = "1" ]; then
        export _NVAPI="1"
        export _DXR="1"
        pl_nvapi
        pl_dxr
    fi
}


# Enable frame capping
pl_framecap() {
    if [ ! -z "${_FRAMECAP}" ] && [ -z "${DXVK_FRAME_RATE}" ]; then
        pl_info "Framerate capped at ${_FRAMECAP} FPS"
        export DXVK_FRAME_RATE="${_FRAMECAP}"
    fi
}


# Enable AMD FSR
pl_fsr() {
    if [ "${_FSR}" = "1" ] && [ -z "${WINE_FULLSCREEN_FSR}" ]; then
        pl_info "AMD FSR Enabled"
        export WINE_FULLSCREEN_FSR=1
    fi
}

# Manage launch options
# TODO: Improve launch options
if [ -z "${1}" ]; then
    pl_error "Expecting a program name or aregument, try --help"
fi

case ${1} in
    "-h") pl_usage; exit 0;;
    "--help") pl_usage; exit 0;;
    "-v") pl_version; exit 0;;
    "--version") pl_version; exit 0;;
esac

# Set colors and legacy environment variables
pl_set_colors
pl_set_legacy

# Get variables
pl_get_steam_path
pl_info "steam installation path is '${STEAM_COMPAT_CLIENT_INSTALL_PATH}'"

pl_get_steam_library
pl_info "steam library path found: ${PL_LIBRARY_PATH}"

pl_get_proton_list
pl_get_proton
pl_info "proton version '${PL_PROTON_VERSION}'"
export pl_proton="${pl_proton_path}/proton"

pl_get_prefix
pl_info "prefix '${STEAM_COMPAT_DATA_PATH}'"

# Create and bootstrap prefix
if ! mkdir -pv "${STEAM_COMPAT_DATA_PATH}"; then
    pl_error "failed to create prefix '${STEAM_COMPAT_DATA_PATH}'"
fi
if ! pl_bootstrap "${STEAM_COMPAT_DATA_PATH}"; then
    pl_error "failed to bootstrap '${STEAM_COMPAT_DATA_PATH}'"
fi

# pl_mangohud
# pl_gamemode
# pl_nvapi
# pl_dxr
# pl_rtx
# pl_framecap
# pl_fsr

# # Run proton
# pl_run "${@}"

# pl_set_colors
# pl_set_legacy_support
# pl_get_steam_path
# pl_get_steam_library
# pl_get_proton_list
# pl_get_proton
# pl_get_prefix
# pl_info "${STEAM_COMPAT_DATA_PATH}"
