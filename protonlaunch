#!/usr/bin/env sh
# Copyright (c) 2022, Artur 'h0m3' Paiva <dr.hoome@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of protonlaunch nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Protonlaunch IS NOT associated with Valve Software. Steam, Valve and Proton
# are developed by and trademarks of of Valve Software.
#


# Version string
VERSION="0.9"

# Get program name
PROGRAM_NAME="$(basename "${0}")"


# Show message logs
pl_info() {
    if [ -z "${PL_QUIET}" ] || [ "${PL_QUIET}" = "0" ]; then
        echo "${pl_bold}${pl_blue}${PROGRAM_NAME}:${pl_normal} ${1}" > /dev/stdout
    fi
}


# Show a warning message
pl_warning() {
    echo "${pl_bold}${pl_yellow}${PROGRAM_NAME}:${pl_normal} warning: ${1}" > /dev/stdout
}


# Raise an error and terminate the application
pl_error() {
    echo "${pl_bold}${pl_red}${PROGRAM_NAME}:${pl_normal} error: ${1}" > /dev/stderr
    exit 1
}


# Show debug messages
pl_debug() {
    if [ "${PL_DEBUG}" = "1" ]; then
        echo "${pl_normal}${PROGRAM_NAME}: debug: ${1}" > /dev/stdout
    fi
}

# Show a usage message
pl_usage() {
    printf "Usage: %s [option] program [arguments...]\n" "${PROGRAM_NAME}"
    printf "\n"
    printf "Options:\n"
    printf "\t--help\t\t\tDisplay this message and exit\n"
    printf "\t--version\t\tDisplay version and exit\n"
    printf "\t--steam-path\t\tPath to Steam installation user files (usually \$HOME/.steam/steam). STEAM_COMPAT_CLIENT_INSTALL_PATH have priority\n"
    printf "\t--proton-version\tVersion of proton to use, check out --proton-version-list\n"
    printf "\t--proton-version-list\tReturn a list of all found Proton versions\n"
    printf "\t--quiet\t\t\tSupress information messages, makes protonlaunch more quiet, ideal for scripts\n"
    printf "\t--debug\t\t\tEnable debug messages, may help troubleshooting. I recommend enable debug for posting protonlaunch issues\n"
    printf "\n"
    printf "Environment Variables:\n"
    printf "\tPROTONPREFIX\n"
    printf "\t\tPath to proton prefix (Default is \$HOME/.proton). STEAM_COMPAT_DATA_PATH have priority\n"
    printf "\n"
    printf "\tPL_STEAM_PATH\n"
    printf "\t\tPath to Steam installation user files (usually \$HOME/.steam/steam). STEAM_COMPAT_CLIENT_INSTALL_PATH have priority\n"
    printf "\n"
    printf "\tPL_LIBRARY_PATH\n"
    printf "\t\tPath to Steam Library folder (Default is \$STEAM_COMPAT_CLIENT_INSTALL_PATH)\n"
    printf "\n"
    printf "\tPL_PROTON_VERSION\n"
    printf "\t\tVersion of proton to use, check out --proton-version-list\n"
    printf "\n"
}


# Show a version message
pl_version() {
    echo "ProtonLaunch version ${VERSION}"
    echo "Protonlaunch is licensed under BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>"

    echo
    echo "This is free software; you are free to change and redistribute it."
    echo "There is NO WARRANTY, to the extent permitted by law."
}


# Set colors if supported
pl_set_colors() {
    pl_debug "detecting terminal color support"
    ncolors="$(tput colors)"
    if [ -z "${PL_NO_COLORS}" ] && [ -t 1 ] && [ -n "${ncolors}" ] && [ "$(tput colors)" -ge 8 ]; then
        pl_debug "colors are enabled"
        pl_bold="$(tput bold)"
        export pl_bold
        pl_underline="$(tput smul)"
        export pl_underline
        pl_standout="$(tput smso)"
        export pl_standout
        pl_normal="$(tput sgr0)"
        export pl_normal
        pl_black="$(tput setaf 0)"
        export pl_black
        pl_red="$(tput setaf 1)"
        export pl_red
        pl_green="$(tput setaf 2)"
        export pl_green
        pl_yellow="$(tput setaf 3)"
        export pl_yellow
        pl_blue="$(tput setaf 4)"
        export pl_blue
        pl_magenta="$(tput setaf 5)"
        export pl_magenta
        pl_cyan="$(tput setaf 6)"
        export pl_cyan
        pl_white="$(tput setaf 7)"
        export pl_white
    fi
}


# Set legacy support variables
pl_set_legacy() {
    pl_debug "setting legacy variables"
    if [ -n "${_STEAM_PATH}" ]; then
        #pl_warning "_STEAM_PATH is deprecated, you should use PL_STEAM_PATH"
        PL_STEAM_PATH="${_STEAM_PATH}"
        export PL_STEAM_PATH
    fi

    if [ -n "${_STEAM_LIBRARY_PATH}" ]; then
        #pl_warning "_STEAM_LIBRARY_PATH is deprecated, you should use PL_LIBRARY_PATH"
        pl_add_library_path "${_STEAM_LIBRARY_PATH}"
    fi

    if [ -n "${_PROTON_VERSION}" ]; then
        #pl_warning "_PROTON_VERSION is deprecated, you should use PL_PROTON_VERSION"
        PL_PROTON_VERSION="${_PROTON_VERSION}"
        export PL_PROTON_VERSION
    fi
}


# Check if a command is available
pl_cmd_exists() {
    pl_debug "testing if command '${1}' exists"
    command -v "${1}" > /dev/null 2>&1
}


# Find Steam installation path
pl_get_steam_path() {
    pl_debug "locating steam installation path"
    if [ -z "${STEAM_COMPAT_CLIENT_INSTALL_PATH}" ]; then

        if [ -n "${PL_STEAM_PATH}" ]; then
            STEAM_COMPAT_CLIENT_INSTALL_PATH="${PL_STEAM_PATH}"

        elif [ -d "${HOME}/.local/share/Steam" ] && [ -e "${HOME}/.local/share/Steam/steam.sh" ]; then
            STEAM_COMPAT_CLIENT_INSTALL_PATH="${HOME}/.local/share/Steam"

        elif [ -d "${HOME}/.steam/debian-installaton" ] && [ -e "${HOME}/.steam/debian-installation/steam.sh" ]; then
            STEAM_COMPAT_CLIENT_INSTALL_PATH="${HOME}/.steam/debian-installation"

        elif [ -h "${HOME}/.steam/steam" ]; then
            path="$(readlink "${HOME}/.steam/steam")"
            if [ -e "${path}/steam.sh" ]; then
                STEAM_COMPAT_CLIENT_INSTALL_PATH="${path}"
            fi

        elif [ -d "${HOME}/.steam/steam" ] && [ -e "${HOME}/.steam/steam/steam.sh" ]; then
            STEAM_COMPAT_CLIENT_INSTALL_PATH="${HOME}/.steam/steam"

        else
            pl_error "unable to find Steam path, please set PL_STEAM_PATH"
        fi

        export STEAM_COMPAT_CLIENT_INSTALL_PATH

    fi
}


# Add a path to the steam library paths
pl_add_library_path() {
    pl_debug "adding ${1} to PL_LIBRARY_PATH"
    if [ -z "${PL_LIBRARY_PATH}" ]; then
        PL_LIBRARY_PATH="${1}"
    else
        PL_LIBRARY_PATH="${PL_LIBRARY_PATH}:${1}"
    fi
    export PL_LIBRARY_PATH

}


# Find Steam library paths
pl_get_steam_library() {
    pl_debug "locating steam library paths"
    if [ -f "${STEAM_COMPAT_CLIENT_INSTALL_PATH}/config/libraryfolders.vdf" ]; then
        pl_paths="$(grep -i path "${STEAM_COMPAT_CLIENT_INSTALL_PATH}/config/libraryfolders.vdf" | cut -d '"' -f 4)"
        for pl_path in ${pl_paths}; do
            if [ -d "${pl_path}/steamapps/common" ]; then
                pl_add_library_path "${pl_path}"
            fi
        done
    fi

    if [ -z "${PL_LIBRARY_PATH}" ]; then
        if [ -d "${STEAM_COMPAT_CLIENT_INSTALL_PATH}/steamapps/common" ]; then
            pl_add_library_path "${STEAM_COMPAT_CLIENT_INSTALL_PATH}"
        else
            pl_error "unable to find Steam library, make sure that Proton is installed and set PL_LIBRARY_PATH if necessary"
        fi
    fi
}


# Add proton to proton list
pl_add_proton_list() {
    pl_debug "adding '${1}' to proton list"
    if [ -z "${PL_PROTON_LIST}" ]; then
        PL_PROTON_LIST="${1}"
    else
        PL_PROTON_LIST="${PL_PROTON_LIST}:${1}"
    fi
    export PL_PROTON_LIST
}


# Get all proton versions
pl_get_proton_list() {
    pl_debug "locating steam proton installations"
    old_ifs="${IFS}"
    IFS=":"
    for pl_path in ${PL_LIBRARY_PATH}; do
        library_path="${pl_path}/steamapps/common"
        for proton in "${library_path}"/*; do
            if echo "${proton}" | grep -Fqi proton && [ -f "${proton}/proton" ]; then
                pl_add_proton_list "${proton}"
            fi
        done
    done
    IFS="${old_ifs}"
}


# Get proton
pl_get_proton() {
    pl_debug "getting a usable proton version"
    old_ifs="${IFS}"
    IFS=":"
    for proton in ${PL_PROTON_LIST}; do

        # https://stackoverflow.com/questions/67069192/quick-sorting-a-list-of-files-in-posix-sh
        # Since it check the whole filepath it isn't fixed yet
        [ -e "$proton" ] || continue # Order file in lexicogaphical order

        name="$(basename "${proton}")"
        if [ -z "${PL_PROTON_VERSION}" ]; then
            if [ "${name}" != "Proton - Experimental" ]; then
                PL_PROTON_VERSION="${name}"
                pl_proton_path="${proton}"
                export pl_proton_path
                export PL_PROTON_VERSION
                break
            fi
        elif [ "${name}" = "${PL_PROTON_VERSION}" ]; then
            pl_proton_path="${proton}"
            export pl_proton_path
        fi
    done
    IFS="${old_ifs}"

    if [ -z "${pl_proton_path}" ]; then
        if [ -z "${PL_PROTON_VERSION}" ]; then
            pl_error "no Proton installation found, make sure you've installed Proton trough Steam"
        else
            pl_error "Unable to find Proton installation of '${PL_PROTON_VERSION}'"
        fi
    fi
}


# Get prefix path
pl_get_prefix() {
    pl_debug "locating current prefix"
    if [ -z "${STEAM_COMPAT_DATA_PATH}" ]; then
        if [ -n "${PROTONPREFIX}" ]; then
            STEAM_COMPAT_DATA_PATH="${PROTONPREFIX}"

        elif [ -n "${WINEPREFIX}" ]; then
            pl_warning "is not recommended to use WINEPREFIX. Use PROTONPREFIX instead"
            STEAM_COMPAT_DATA_PATH="${WINEPREFIX}"

        else
            pl_debug "no variable located, ${HOME}/.proton will be"
            STEAM_COMPAT_DATA_PATH="${HOME}/.proton"
        fi

        export STEAM_COMPAT_DATA_PATH
    fi
}


# Bootstrap prefix
pl_bootstrap() {
    if [ ! -d "${1}/pfx/drive_c" ]; then
        pl_info "bootstrapping '${1}'"
        "${pl_proton}" run wineboot
    fi
}


# Run a program
pl_run() {
    pl_command="${1}"
    shift
    pl_params=${*}
    pl_info "Program is '${pl_command}'"

    if [ -z "${pl_params}" ]; then
        pl_debug "using 'run' since theres no parameters"
        pl_debug "Running: \"${pl_proton}\" run \"${pl_command}\""
        "${pl_proton}" run "${pl_command}"
    else
        pl_debug "using 'runinprefix' since there is paramenters"
        pl_debug "Running: \"${pl_proton}\" runinprefix \"${pl_command}\" ${pl_params}"
        "${pl_proton}" runinprefix "${pl_command}" "${pl_params}"
    fi
}


# Print a list of proton versions
pl_proton_version_list() {
    if [ "${PL_PROTON_VERSION_LIST}" = "1" ]; then
        old_ifs="${IFS}"
        IFS=":"
        for pl_path in ${PL_PROTON_LIST}; do
            basename "${pl_path}"
        done
        IFS="${old_ifs}"
        exit 0
    fi
}

# Manage launch options
while [ -n "${1}" ] && echo "${1}" | grep -Fq -- "--"; do
    case ${1} in
        "--help")
            pl_usage
            exit 0
        ;;
        "--version")
            pl_version
            exit 0
        ;;
        "--steam-path")
            STEAM_COMPAT_CLIENT_INSTALL_PATH="${2}"
            shift 2
        ;;
        "--proton-version")
            PL_PROTON_VERSION="${2}"
            shift 2
        ;;
        "--proton-version-list")
            PL_PROTON_VERSION_LIST=1
            shift
        ;;
        "--quiet")
            PL_QUIET=1
            shift
        ;;
        "--debug")
            PL_DEBUG=1
            shift
        ;;
        *)
            pl_error "${1} is not a valid argument, try ${PROGRAM_NAME} --help"
        ;;
    esac
done

if [ -z "${1}" ] && [ -z "${PL_PROTON_VERSION_LIST}" ]; then
    pl_error "Expecting a program name or aregument, try --help"
fi

# Set colors and legacy environment variables
pl_set_colors
pl_set_legacy

# Get variables
pl_get_steam_path
pl_info "steam installation path is '${STEAM_COMPAT_CLIENT_INSTALL_PATH}'"

pl_get_steam_library
pl_debug "steam library path found: ${PL_LIBRARY_PATH}"

pl_get_proton_list
pl_proton_version_list

pl_get_proton
pl_info "proton version '${PL_PROTON_VERSION}'"
pl_proton="${pl_proton_path}/proton"

pl_get_prefix
pl_info "prefix '${STEAM_COMPAT_DATA_PATH}'"

# Create and bootstrap prefix
if ! mkdir -pv "${STEAM_COMPAT_DATA_PATH}"; then
    pl_error "failed to create prefix '${STEAM_COMPAT_DATA_PATH}'"
fi
if ! pl_bootstrap "${STEAM_COMPAT_DATA_PATH}"; then
    pl_error "failed to bootstrap '${STEAM_COMPAT_DATA_PATH}'"
fi

# Run proton
pl_run "${@}"
